threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, ],
s = s[accept, ],
threshold_used = threshold_dist)
result
}
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(s)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
# Calculate dists and reject
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, ],
s = s[accept, ],
threshold_used = threshold_dist)
result
}
prior = matrix(runif(1000), 100, 10)
s = matrix(runif(500), 100, 5)
abc_rej(prior, s, runif(5))
library(sbizombies)
distance()
library(sbizombies)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
pbs_idx
devtools::load_all("..")
devtools::install_github("https://github.com/danielward27/sbizombies")
n_sim = 10000
matrix(beta = runif(0, 3),
gamma = runif(0, 3))
matrix(runif(0, 3), runif(0, 3))
matrix(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
dim(matrix(runif(n_sim, 0, 3), runif(n_sim, 0, 3)))
dim(cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3)))
cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
read.table(paste0("pods/pod_theta_", pbs_idx, ".txt"))
read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s = szr(prior, 100, 99, 1, 0, 20, 10)
s = szr(prior)
s = szr(prior, N = 1000)
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s = szr(prior, N = 1000, tf = length(s_obs), initial = FALSE)
s
dim(s)
length(s_obs)
s_obs
as.vector(s_obs)
length(as.vector(s_obs))
unlist(s_obs)
as.vector(unlist(s_obs))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs), initial = FALSE)
dim(s)
s
dim(s)
abc_rej(prior, s, s_obs)
length(s_obs)
ncol(s)
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
abc_rej(prior, s, s_obs)
s
is.na(s)
any(is.na(s))
abc_rej(prior, s, s_obs)
write.table(prior, "temp_prior.txt")
write.table(s, "temp_s.txt")
write.table(s_obs, "temp_s_obs.txt")
library(sbizombies)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
getwd()
szr(t(c(1,2)), 100, 100)
szr(t(c(1,2)), 100, 100)
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
szr(t(c(1,2)), 100, 100)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
scale_out
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
szr(theta, N = 1000, tf = 500)
[1, ]
szr(theta, N = 1000, tf = 500)[1, ]
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(c(0.55, 2.10), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
devtools::load_all("..")
set.seed(2)
i = 1
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
devtools::load_all("..")
devtools::load_all("..")
devtools::load_all("..")
compileAttributes()
compileAttributes("..")
devtools::load_all("..")
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
devtools::load_all("..")
devtools::load_all("..")
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
roxygen2::roxygenise()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
roxygen2::roxygenise()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
pkgbuild::compile_dll()
devtools::document()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
# initial
theta = matrix(c(0.1,0.05),nrow=1)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
Rcpp::sourceCpp('~/Documents/compass/sbizombies/src/szr.cpp')
# initial
theta = matrix(c(0.1,0.05),nrow=1)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
szr(theta,1000,500)
## training
theta = matrix(runif(4),nrow=2)
szr(theta,1000,500)
# initial
theta = matrix(c(0.1,0.05),nrow=1)
szr(theta,1000,500)
for (i in 1:100){
szr(theta,1000,500)
}
for (i in 1:1000){
szr(theta,1000,500)
}
# initial
theta = matrix(c(0.1,0.05),nrow=1)
for (i in 1:1000){
szr(theta,1000,500)
}
for (i in 1:1000){
szr(theta,1000,500)
}
for (i in 1:1000){
szr(theta,1000,500)
}
Rcpp::sourceCpp('~/Documents/compass/sbizombies/src/szr.cpp')
for (i in 1:1000){
szr(theta,1000,500, FALSE)
}
?tryCatch
?tryCatch
tryCatch(i=1, print("hi"))
tryCatch(i=1)
tryCatch(i=1)
tryCatch(expr, i=1)
tryCatch(expr, i=1)
abc_mcmc()
abc_mcmc()
abc_mcmc()
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
devtools::load_all("..")
rm(list = c("szr"))
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
getwd()
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 1e6
burn_in = 2.5e5
sd = c(1,1) #sds for the proposal dist
getwd()
setwd("analysis")
setwd("/analysis")
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
set.seed(pbs_idx)
n_sim = 1000000
prior = cbind(runif(n_sim, 0, 5), runif(n_sim, 0, 5))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs, q=0.001)
outfile_posterior = paste0("rej_results/rej_posterior_", pbs_idx, ".txt")
outfile_s = paste0("rej_results/rej_s_pod_", pbs_idx, ".txt")
outfile_meta = paste0("rej_results/rej_meta_", pbs_idx, ".txt")
c(mean = res$s_mean, sd = res$s_sd, ep=res$threshold_used)
c(mean = res$s_mean, sd = res$s_sd)
matrix(mean = res$s_mean, sd = res$s_sd)
matrix(res$s_mean, sd = res$s_sd)
cbind(res$s_mean, sd = res$s_sd)
cbind(mean = res$s_mean, sd = res$s_sd)
s_obs
res$threshold_used
scale
library(sbizombies)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
set.seed(pbs_idx)
n_sim = 1000000
prior = cbind(runif(n_sim, 0, 5), runif(n_sim, 0, 5))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs, q=0.001)
outfile_posterior = paste0("rej_results/rej_posterior_", pbs_idx, ".txt")
outfile_s = paste0("rej_results/rej_s_", pbs_idx, ".txt")
outfile_scale = paste0("rej_results/rej_scale_", pbs_idx, ".txt")
scale = cbind(mean = res$s_mean, sd = res$s_sd)
write.table(res$posterior, outfile_posterior, col.names = FALSE, row.names = FALSE)
write.table(res$s, outfile_s, col.names = FALSE, row.names = FALSE)
write.table(scale, outfile_scale)
write.table(scale, outfile_scale, col.names = FALSE, row.names = FALSE)
scale_ss = matrix(c(round(seq(2, 200, length.out=20)),
round(seq(2, 200, length.out=20)),
round(seq(2,50,length.out=20)),
round(seq(2,50,length.out=20))),
nrow=2, ncol=40, byrow=T)#@@@@ READ FROM FILE
scale_ss
dim(scale_ss)
scale_file = paste0("rej_results/rej_scale_", pbs_idx,".txt")
scale_file
scale_ss = read.table(scale_file)
scale_ss
t(scale_ss)
scale_ss
scale_ss = read.table(scale_file, row.names = FALSE, col.names = FALSE)
scale_ss = read.table(scale_file, row.names = FALSE, header = FALSE)
scale_ss = read.table(scale_file, row.names = FALSE)
scale_ss = read.table(scale_file)
scale_ss
scale_ss = read.table(scale_file, header = FALSE)
scale_ss
scale_ss = read.table(scale_file, header = FALSE, col.names = NULL)
scale_ss = read.table(scale_file)
unname(scale_ss)
t(unname(scale_ss))
scale_ss = t(read.table(scale_file))
dim(scale_ss)
scale_file = paste0("rej_results/rej_scale_", pbs_idx,".txt")
scale_ss = t(read.table(scale_file))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
res = abc_mcmc(s_obs, n_sim, sd, prior_params, epsilon, scale_ss)
epsilon = c(seq(10000,1000,length.out=burn_in),
rep(1000,n_sim-burn_in))#value of epsilon for accp/rej  @@@@ READ FROM FILE
res = abc_mcmc(s_obs, n_sim, sd, prior_params, epsilon, scale_ss)
prior_params = matrix(c(rep(0,2), rep(5, 2)), 2, 2) #params for the prior
n_sim = 1e6
burn_in = 2.5e5
sd = c(1,1) #sds for the proposal dist
prior_params = matrix(c(rep(0,2), rep(5, 2)), 2, 2) #params for the prior
epsilon = c(seq(10000,1000,length.out=burn_in),
rep(1000,n_sim-burn_in))#value of epsilon for accp/rej  @@@@ READ FROM FILE
matrix(c(0, 0, 5, 5), nrow=2)
matrix(c(0, 5, 0, 5), nrow=2)
prior_params = matrix(c(rep(0,2), rep(5, 2)), 2, 2) #params for the prior
epsilon = c(seq(10000,1000,length.out=burn_in),
rep(1000,n_sim-burn_in))#value of epsilon for accp/rej  @@@@ READ FROM FILE
scale_file = paste0("rej_results/rej_scale_", pbs_idx,".txt")
scale_ss = t(read.table(scale_file))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
res = abc_mcmc(s_obs, n_sim, sd, prior_params, epsilon, scale_ss)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 1e6
burn_in = 2.5e5
sd = c(1,1) #sds for the proposal dist
prior_params = matrix(c(rep(0,2), rep(5, 2)), 2, 2) #params for the prior
epsilon = c(seq(10000,1000,length.out=burn_in),
rep(1000,n_sim-burn_in))#value of epsilon for accp/rej  @@@@ READ FROM FILE
scale_file = paste0("rej_results/rej_scale_", pbs_idx,".txt")
scale_ss = t(read.table(scale_file))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
res = abc_mcmc(s_obs, n_sim, sd, prior_params, epsilon, scale_ss)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 1e6
burn_in = 2.5e5
sd = c(1,1) #sds for the proposal dist
prior_params = matrix(c(rep(0,2), rep(5, 2)), 2, 2) #params for the prior
epsilon = c(seq(10000,1000,length.out=burn_in),
rep(1000,n_sim-burn_in))#value of epsilon for accp/rej  @@@@ READ FROM FILE
scale_file = paste0("rej_results/rej_scale_", pbs_idx,".txt")
scale_ss = t(read.table(scale_file))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
res = abc_mcmc(s_obs, n_sim, sd, prior_params, epsilon, scale_ss)
devtools::load_all("..")
source('~/Documents/compass/sbizombies/analysis/run_mcmc.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
