View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
j <- sample(c(1,2),1)
if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2]),sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
}
else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1]),sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
}
X[i,] <- x
}
View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
j <- sample(c(1,2),1)
if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2]),sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
1
}
else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1]),sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
2
}
X[i,] <- x
}
View(sigma)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2]),sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1]),sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(0,0)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2]),sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1]),sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(0,0)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2]),sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1]),sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
count=0
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
count
head(X)
View(X)
#}
#else{
x[2] <- rnorm(1,mean=mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
View(X)
mu <- c(2,1)
sigma <- matrix(c(4,3,2,1),nrow=2)
count=0
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
count
head(X)
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
x
mu <- c(2,1)
sigma <- matrix(c(4,1,2,1),nrow=2)
count=0
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(1,1)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
count
head(X)
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
View(sigma)
mu <- c(2,1)
sigma <- matrix(c(4,1,2,1),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(0,0)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
head(X)
View(sigma)
mu <- c(2,1)
sigma <- matrix(c(3.5,1,1.5,2),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(0,0)
for(i in 1:n){
#j <- sample(c(1,2),1)
#if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
#}
#else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
#}
X[i,] <- x
}
head(X)
mu <- c(2,1)
sigma <- matrix(c(3.5,1,1.5,2),nrow=2)
n <- 1000
X <-matrix(ncol=2,nrow=n)
x <-  c(0,0)
for(i in 1:n){
j <- sample(c(1,2),1)
if(j==1){
x[1] <- rnorm(1,mu[1]+sigma[1,2]/sigma[2,2]*(x[2]-mu[2])
,sqrt(sigma[1,1]-sigma[1,2]^2/sigma[2,2]))
}
else{
x[2] <- rnorm(1,mu[2]+sigma[1,2]/sigma[1,1]*(x[1]-mu[1])
,sqrt(sigma[2,2]-sigma[1,2]^2/sigma[1,1]))
}
X[i,] <- x
}
head(X)
plot(x)
plot(X)
plot(X[901:1000,],type="b")
plot(X[950:1000,],type="b")
t <- -100:100/10
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvdnorm(cbind(x1,x2),...),mu,sigma)
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
mvnorm <-  function(x,mu,sigma){
1 / (2*pi * sqrt(det(sigma)))
* exp(-0.5*sum((x - mu)*solve(sigma,x - mu)))
mvnorm <-  function(x,mu,sigma){
1 / (2*pi * sqrt(det(sigma))) * exp(-0.5*sum((x - mu)*solve(sigma,x - mu)))
}
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
dim(t)
t <- -1000:1000/100
dim(t)
mvnorm <-  function(x,mu,sigma){
dif <- x-mu
1 / (2*pi * sqrt(det(sigma))) * exp(-0.5*sum((dif)*solve(sigma,dif)))
}
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
sigma
dif
library(MASS)
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) dmvnorm(cbind(x1,x2),...),mu,sigma)
library(mvtnorm)
library(mvtnorm)
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) dmvnorm(cbind(x1,x2),...),mu,sigma)
mvnorm <-  function(x,mu,sigma){
dif <- x-mu
1 / (2*pi * sqrt(det(sigma))) * exp(-0.5*sum((dif)*solve(sigma,dif)))
}
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
mvdnorm <- function(x, mu, sigma){
if (is.vector(x)) x <- t(x)
# if x is a vector, coerce it into a matrix
x.minus.mu <- t(sweep(x,2,mu,'-'))
# subtract mu from x
sigma.chol <- chol(sigma)
# compute the Choleski decomposition of sigma
sqrt.det <- prod(diag(sigma.chol))
# compute sqrt(det(sigma))
exp.arg <- -0.5 * colSums(x.minus.mu * backsolve(sigma.chol,forwardsolve(sigma.chol,x.minus.mu,upper.tri=TRUE,transpose=TRUE)))
# evaluate what’s inside the exp(...)
drop(1 / ((2*pi)^(ncol(x)/2) * sqrt.det) * exp(exp.arg))}
t <- -1000:1000/100
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
t <- -75:75/10
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
mvnorm <- function(x, mu, sigma){
if (is.vector(x)) x <- t(x)
# if x is a vector, coerce it into a matrix
x.minus.mu <- t(sweep(x,2,mu,'-'))
# subtract mu from x
sigma.chol <- chol(sigma)
# compute the Choleski decomposition of sigma
sqrt.det <- prod(diag(sigma.chol))
# compute sqrt(det(sigma))
exp.arg <- -0.5 * colSums(x.minus.mu * backsolve(sigma.chol,forwardsolve(sigma.chol,x.minus.mu,upper.tri=TRUE,transpose=TRUE)))
# evaluate what’s inside the exp(...)
drop(1 / ((2*pi)^(ncol(x)/2) * sqrt.det) * exp(exp.arg))}
t <- -75:75/10
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
image(t,t,mat)
points(X)
image(t,t,mat)
points(X)
image(t,t,mat)
plot(x[951:1000,],type="b")
image(t,t,mat)
plot(X[951:1000,],type="b")
image(t,t,mat)
points(X[951:1000,],type="b")
x <- -75:75/10
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
image(x,x,mat)
t <- -75:75/10
mat <- outer(t,t,function(x1,x2,...) mvnorm(cbind(x1,x2),...),mu,sigma)
image(x,x,mat)
chol(sigma)
sigma
diag(chol(sigma))
library(devtools)
install_github( "ss15859/tennis.wta")
library(tennis.wta)
uninstall("tennis.wta")
remove.packages("tennis.wta", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install_github( "ss15859/tennis.wta")
library(tennis.wta)
library(tennis.wta)
remove.packages("tennis.wta", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install_github( "ss15859/tennis.wta")
library(tennis.wta)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(gam)
library(Metrics)
# Read and coerce into factors/dates
data <- read_csv('new_train.csv')
data <- data %>%
mutate(across(c(Customer, Country,`State Code`, State, Response, Coverage, Education,
EmploymentStatus, Gender, `Location Code`, `Marital Status`, `Policy Type`,Policy,`Claim Reason`,`Sales Channel`,
`Vehicle Class`,`Vehicle Size`), as.factor))
data <- data%>%
mutate(across(`Effective To Date`,as_date,format='%m/%d/%Y'))
data <- data %>% select(-c(Country,Customer,State))
new_data <- data
## train-test split
set.seed(123)
train_ind <- sample(seq_len(nrow(new_data)), size = smp_size)
install.packages('prabclus')
knitr::opts_chunk$set(echo = TRUE)
library(prabclus)
dist = as.matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4)
dist
dist = as.matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
dist
dist = matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
dist
dist = data.matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
dist
colnames(dist) <- rownames(dist) <- c('L','G','H','S')
dist
par(mfrow=c(1, 2))
plot(hclust(dist, method=’single’), main=’SLINK’)
plot(hclust(dist, method=’single’), main=’SLINK’)
par(mfrow=c(1, 2))
plot(hclust(dist, method=’single’), main=’SLINK’)
hclust(dist, method=’single’)
hclust(dist, method='single')
dist(dist)
dist
dist(dist)
dist([1:100],[100:1])
dist(C(1:100),c(100:1])
dist(c(1:100),c(100:1))
dist(c(1:100))
dist(c(1:10))
dist
dist = data.matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3)
colnames(dist) <- c('L','G','H')
rownames(dist) <- c('G','H','S')
dist
dist = data.matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3)
dist = data.matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3)
dist = matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3)
colnames(dist) <- c('L','G','H')
rownames(dist) <- c('G','H','S')
dist
dist = t(matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3))
colnames(dist) <- c('L','G','H')
rownames(dist) <- c('G','H','S')
dist
par(mfrow=c(1, 2))
hclust(dist, method='single')
plot(hclust(dist, method=’complete’), main=’CLINK’)
hclust(dist, method='single')
hclust(dist, method='single')
plot(hclust(dist, method=’complete’), main=’CLINK’)
plot(hclust(dist, method='complete'), main=’CLINK’)
hclust(dist, method='complete')
dist(dist)
dist
dist <- dist(dist)
par(mfrow=c(1, 2))
hclust(dist, method='single')
hclust(dist, method='complete')
plot(hclust(dist, method='single'))
plot(hclust(dist, method='complete'))
par(mfrow=c(1, 2))
plot(hclust(dist, method='single'))
plot(hclust(dist, method='complete'))
dist(dist)
dist(dist)['G']
dist = t(data.matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3))
dist
dist = t(matrix(c(0.4,0,1,0.75,1,0,0.67,0.67,1),nrow=3,ncol=3))
colnames(dist) <- c('L','G','H')
rownames(dist) <- c('G','H','S')
dist
dist = data.matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
dist = matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
colnames(dist) <- rownames(dist) <- c('L','G','H','S')
dist <- as.dist(dist)
dist
par(mfrow=c(1, 2))
hclust(dist, method='single')
plot(hclust(dist, method=’complete’), main=’CLINK’)
dist = matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
colnames(dist) <- rownames(dist) <- c('Lion','Giraffe','Human','Sheep')
dist <- as.dist(dist)
dist
dist = matrix(c(0,0.40,0.75,0.67,0.4,0,1,0.67,0.75,1,0,1,0.67,0.67,1,0),nrow=4,ncol=4)
colnames(dist) <- rownames(dist) <- c('Lion','Giraffe','Human','Sheep')
dist <- as.dist(dist)
dist
```{r}
par(mfrow=c(1, 2))
plot(hclust(dist, method='single'),main='SLINK')
plot(hclust(dist, method='complete'), main='CLINK')
par(mfrow=c(1, 2))
plot(hclust(dist, method='single'),main='SLINK',xlab='')
plot(hclust(dist, method='complete'), main='CLINK',xlab='')
par(mfrow=c(1, 2))
plot(hclust(dist, method='single'),main='Single Linkage',xlab='')
plot(hclust(dist, method='complete'), main='Complete Linkage',xlab='')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
dist1 = matrix(c(0,0.29,0.43,0.57,0.29,0,71,0.57,0.43,0.71,0,0.71,0.57,0.57,0.71,0),nrow=4,ncol=4)
colnames(dist1) <- rownames(dist1) <- c('Lion','Giraffe','Human','Sheep')
dist1 <- as.dist(dist1)
dist1
dist1 = matrix(c(0,0.29,0.43,0.57,0.29,0,0.71,0.57,0.43,0.71,0,0.71,0.57,0.57,0.71,0),nrow=4,ncol=4)
colnames(dist1) <- rownames(dist1) <- c('Lion','Giraffe','Human','Sheep')
dist1 <- as.dist(dist1)
dist1
par(mfrow=c(1, 2))
plot(hclust(dist1, method='single'),main='Single Linkage',xlab='')
plot(hclust(dist1, method='complete'), main='Complete Linkage',xlab='')
dist3 <- matrix(c(0,16,20,20,14,24,28,96,78,79,16,0,20,25,17,35,39,96,78,79,20,20,0,29,13,33,36,99,84,84,20,25,29,0,22,38,29,88,71,74,14,17,13,22,0,32,30,93,78,78,24,35,33,38,32,0,30,97,79,79,28,39,36,29,30,30,0,92,78,83,96,96,99,88,93,97,92,0,26,34,78,78,84,71,78,79,78,26,0,25,79,79,84,74,78,79,83,34,25,0),10,10)
colnames(dist3) <- rownames(dist3) <- c("Tresco", "Bryher", "St Agnes", "St Martin's", "St Mary's", "Sark", "Jersey", "Alderney", "Guernsey", "Cap Gris Nez")
dist3 <- as.dist(dist3)
dist3
library(sbizombies)
setwd("~/Documents/group_project/sbizombies")
# initial
theta = matrix(c(0.1,0.05,0.1),nrow=1)
theta
Rcpp::sourceCpp('src/sirc.cpp')
# initial
theta = matrix(c(0.1,0.05,0.1),nrow=1)
sirc(theta,1000,500)
sirc(theta,1000,500)
sirc(theta,1000,500)
sirc(theta,1000,500)
## training
theta = matrix(rnorm(9),nrow=3)
theta
## training
theta = matrix(runif(9),nrow=3)
## training
theta = matrix(runif(9),nrow=3)
theta
## training
theta = matrix(runif(9),nrow=3)
sirc(theta,1000,300,initial = F)
sirc(theta,1000,100,initial = F)
sirc(theta,1000,50,initial = F)
Rcpp::sourceCpp('src/sirc.cpp')
sirc(theta,1000,50,initial = T)
Rcpp::sourceCpp('src/sirc.cpp')
sirc(theta,1000,50,initial = T)
setwd("~/Documents/group_project/sbizombies/tests/testthat")
dim(theta)
tf = 50
nruns = 3
theta = matrix(runif(nruns*3),nrow=nruns)
X = sirc(theta,1000,tf,initial = F)
dim(X)
expect_equal(c(nruns,2*tf),dim(X))
c(nruns,2*tf)==dim(X)
tf = 500
theta = matrix(c(0.1,0.05,0.1),nrow=1)
X = sirc(theta,1000,tf,initial = T)
dim(X)
dim(X)[1]
