posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
read.csv("metrics/logprob.csv")
read.csv("metrics/logprobs.csv")
write.csv(logprobs, "metrics/logprobs.csv")
read.csv("metrics/logprobs.csv")
write.csv(logprobs, "metrics/logprobs.csv", row.names = FALSE)
read.csv("metrics/logprobs.csv")
logprobs_df = read.csv("metrics/logprobs.csv")
logprobs_df
logprobs_df %>%
pivot_longer(everything(), names_to = "parameter")
logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", )
logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", values_to = "negative_log_prob")
logprobs_df = logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", values_to = "negative_log_prob") %>%
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Root mean square error")
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey")# +
p3
logprobs_df = logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", values_to = "negative_log_prob")
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Root mean square error")
p3
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Negative log-probability of true parameters")
p3
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Negative log-probability")
p3
ggsave("plots/neg_log_plot.png", p3, width = 6, height = 3.5, dpi = 600)
ggsave("plots/neg_log_boxplot.png", p3, width = 6, height = 3.5, dpi = 600)
logprobs_df = read.csv("metrics/logprobs.csv")
logprobs_df = logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", values_to = "negative_log_prob")
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Negative log-probability")
p3
ggsave("plots/neg_log_boxplot.png", p3, width = 6, height = 3.5, dpi = 600)
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
algorithms = c("rej", "mcmc")
logprobs = data.frame(rej=rep(0,100), mcmc=rep(0,100))
data_list = list()
for (algorithm in algorithms){
for (i in 1:100) {
data_file = paste0(algorithm, "_results/", algorithm, "_posterior_", i, ".txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
beta_dens = approxfun(density(alg_df[,1]))
gamma_dens = approxfun(density(alg_df[,2]))
beta_prob = beta_dens(true_parameters[i,1])
gamma_prob = gamma_dens(true_parameters[i,2])
logprobs[i, algorithm] = -log(beta_prob * gamma_prob)
}
}
logprobs
logprobs = rename(logprobs, rejection = rej)
write.csv(logprobs, "metrics/logprobs.csv", row.names = FALSE)
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
algorithms = c("rej", "mcmc")
logprobs = data.frame(rej=rep(0,100), mcmc=rep(0,100))
data_list = list()
for (algorithm in algorithms){
for (i in 1:100) {
data_file = paste0(algorithm, "_results/", algorithm, "_posterior_", i, ".txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
beta_dens = approxfun(density(alg_df[,1]))
gamma_dens = approxfun(density(alg_df[,2]))
beta_prob = beta_dens(true_parameters[i,1])
gamma_prob = gamma_dens(true_parameters[i,2])
logprobs[i, algorithm] = -log(beta_prob * gamma_prob)
}
}
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
algorithms = c("rej", "mcmc")
logprobs = data.frame(rej=rep(0,100), mcmc=rep(0,100))
data_list = list()
for (algorithm in algorithms){
for (i in 1:100) {
data_file = paste0(algorithm, "_results/", algorithm, "_posterior_", i, ".txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
beta_dens = approxfun(density(alg_df[,1]))
gamma_dens = approxfun(density(alg_df[,2]))
beta_prob = beta_dens(true_parameters[i,1])
gamma_prob = gamma_dens(true_parameters[i,2])
logprobs[i, algorithm] = -log(beta_prob * gamma_prob)
}
}
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
algorithms = c("rej", "mcmc")
logprobs = data.frame(rej=rep(0,100), mcmc=rep(0,100))
data_list = list()
for (algorithm in algorithms){
for (i in 1:100) {
data_file = paste0(algorithm, "_results/", algorithm, "_posterior_", i, ".txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
beta_dens = approxfun(density(alg_df[,1]))
gamma_dens = approxfun(density(alg_df[,2]))
beta_prob = beta_dens(true_parameters[i,1])
gamma_prob = gamma_dens(true_parameters[i,2])
logprobs[i, algorithm] = -log(beta_prob * gamma_prob)
}
}
logprobs
logprobs = rename(logprobs, rejection = rej)
write.csv(logprobs, "metrics/logprobs.csv", row.names = FALSE)
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
df
algorithm = "mcmc"
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
df = read.table(data_file, col.names = c("beta", "gamma"))
df
data_file = paste0("mcmc_results/mcmc_posterior_1.txt")
df = read.table(data_file, col.names = c("beta", "gamma"))
df
length(unique(df$beta))/length(df$beta)
ggsave("plots/true_vs_predicted.png", p1, width = 6, height = 3.5, dpi = 600)
df$rmse = sqrt((df$inferred_parameter_value - df$true_parameters)^2)
library(tidyverse)
theme_set(theme_bw())
pod_list = list()
for (i in 1:100){
pod_file = paste0("pods/pod_theta_", i, ".txt")
data = read.table(pod_file, col.names = c("beta", "gamma"))
pod_list = append(pod_list, list(data))
}
true_parameters = do.call("rbind", pod_list)
true_parameters$pod_idx = 1:100
true_parameters = true_parameters %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "true_parameters")
algorithms = c("rej", "mcmc")
data_list = list()
for (algorithm in algorithms){
data_file = paste0("posterior_means/", algorithm, "_posterior_means.txt")
alg_df = read.table(data_file, col.names = c("beta", "gamma"))
alg_df$algorithm = algorithm
alg_df$pod_idx = 1:100
data_list = append(data_list, list(alg_df))
}
posterior_means = do.call("rbind", data_list)
posterior_means = posterior_means %>%
pivot_longer(cols = c(beta, gamma), names_to = "parameter", values_to = "inferred_parameter_value")
posterior_means
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
algorithm = "mcmc"
data_file = paste0("mcmc_results/mcmc_posterior_1.txt")
df = read.table(data_file, col.names = c("beta", "gamma"))
length(unique(df$beta))/length(df$beta)
acceptance_rates = c()
for (i in 1:100){
data_file = paste0("mcmc_results/mcmc_posterior_", i, ".txt")
df = read.table(data_file, col.names = c("beta", "gamma"))
acceptance_rates = c(acceptance_rates, length(unique(df$beta))/length(df$beta))
}
acceptance_rates
plot(acceptance_rates)
acceptance_rates
hist(acceptance_rates)
acceptance_rates
max(acceptance_rates)
min(acceptance_rates)
hist(acceptance_rates)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
set.seed(pbs_idx)
n_sim = 1000000
prior = cbind(runif(n_sim, 0, 5), runif(n_sim, 0, 5))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs, q=0.001)
library(sbizombies)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
set.seed(pbs_idx)
n_sim = 1000000
prior = cbind(runif(n_sim, 0, 5), runif(n_sim, 0, 5))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs, q=0.001)
res$threshold_used
res = abc_rej(prior, s, s_obs, q=0.01)
res$threshold_used
ggplot(aes(x = acceptance_rates)) +
scale_x_log10()
ggplot(aes(x = acceptance_rates)) +
scale_x_log10()
ggplot(mapping =  aes(x = acceptance_rates)) +
scale_x_log10()
ggplot(data = NULL, mapping =  aes(x = acceptance_rates)) +
scale_x_log10()
ggplot(data = NULL, mapping =  aes(x = acceptance_rates)) +
geom_hist()
ggplot(data = NULL, mapping =  aes(x = acceptance_rates)) +
geom_histogram() +
scale_x_log10()
mean(acceptance_rates)
mean(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates, trim = 0.01)
mean(acceptance_rates, trim = 0.1)
mean(acceptance_rates, trim = 0.2)
mean(acceptance_rates, trim = 0.1)
mean(acceptance_rates, trim = 0.4)
mean(acceptance_rates, trim = 0.05)
median(acceptance_rates)
mean(acceptance_rates, trim = 0.1)
median(acceptance_rates)
mean(acceptance_rates, trim = 0.1)
mean(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(acceptance_rates)
median(acceptance_rates)
mean(mean(acceptance_rates), median(acceptance_rates))
mean(mean(acceptance_rates), median(acceptance_rates))
mean(c(mean(acceptance_rates), median(acceptance_rates))
mean(c(mean(acceptance_rates), median(acceptance_rates)))
acceptance_rates = c()
for (i in 1:100){
data_file = paste0("mcmc_results/mcmc_posterior_", i, ".txt")
df = read.table(data_file, col.names = c("beta", "gamma"))
acceptance_rates = c(acceptance_rates, length(unique(df$beta))/length(df$beta))
}
print(mean(acceptance_rates))
print(median(acceptance_rates))
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
df = left_join(posterior_means, true_parameters, by = c("pod_idx", "parameter"))
df$algorithm[df$algorithm == "rej"] = "rejection"
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(algorithm~parameter, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
p1 = ggplot(df, aes(true_parameters, inferred_parameter_value)) +
geom_point() +
facet_grid(parameter~algorithm, scales = "fixed") +
geom_abline(slope=1, colour = "brown") +
labs(x = "True parameter value", y = "Inferred parameter value")
p1
ggsave("plots/true_vs_predicted.png", p1, width = 6, height = 3.5, dpi = 600)
df$rmse = sqrt((df$inferred_parameter_value - df$true_parameters)^2)
p2 = ggplot(df, aes(y = rmse, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
facet_wrap(~parameter) +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Root mean square error")
p2
p2 = ggplot(df, aes(y = rmse, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
facet_wrap(~parameter, scales = "free") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Root mean square error")
p2
ggsave("plots/rmse_boxplot.png", p2, width = 6, height = 3.5, dpi = 600)
logprobs_df = read.csv("metrics/logprobs.csv")
logprobs_df = logprobs_df %>%
pivot_longer(everything(), names_to = "algorithm", values_to = "negative_log_prob")
p3 = ggplot(logprobs_df, aes(y = negative_log_prob, x = algorithm)) +
geom_boxplot(fill = "lightgrey") +
stat_summary(fun=mean, geom="point", shape=4, size=3, color="black", fill="red") +
labs(x = "Algorithm", y = "Negative log-probability")
p3
ggsave("plots/neg_log_boxplot.png", p3, width = 6, height = 3.5, dpi = 600)
install.packages("knitr")
knitr::purl("calc_log_probs.Rmd")
library(sbizombies)
pwd()
getwd()
