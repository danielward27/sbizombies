as.integer("1")
my_results = matrix(runif(3400), 34, 10)
my_results
dim(my_results)
paste0("results_", my_array_idx)
pbs_idx = 1
paste0("results_", pbs_idx)
paste0("results_", pbs_idx)
paste0("results_.txt", pbs_idx)
paste0("results_", pbs_idx, ".txt")
outfile = paste0("results_", pbs_idx, ".txt")
outfile
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
outfile
results
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results
cbind(pbs_idx, results)
results = cbind(pbs_idx, results)
write.table(results, outfile)
read.table(outfile)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
write.table(results, outfile)
# Index the correct observation
pbs_idx = 2
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
pbs_idx = 2
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
write.table(results, outfile)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
pbs_idx = 3
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
write.table(results, outfile)
read.table("result_chunks/result_1")
read.table("result_chunks/result_1.txt")
getwd()
read.table("result_chunks/results_1.txt")
read.table("result_chunks/result_1.txt")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
pbs_idx = 1
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile)
read.table("result_chunks/result_1.txt")
list.files("./result_chunks")
files
files = list.files("./result_chunks")
files
?list.files()
files
files = list.files("./result_chunks", pattern = "result_?.txt")
files
files = list.files("./result_chunks", pattern = "result_*.txt")
files
files = list.files("./result_chunks", pattern = "result_[*].txt")
files
files = list.files("./result_chunks", pattern = "result_.*\\..txt")
files
files = list.files("./result_chunks", pattern = "result_\\*.txt")
files
files = list.files("./result_chunks", pattern = "result_")
files
files = list.files("./result_chunks", pattern = "result_")
results = list()
for (f in in files){
result = read.table(f)
results = append(results, result)
}
for (f in files){
result = read.table(f)
results = append(results, result)
}
list.files("./result_chunks", pattern = "result_")
list.dirs("./result_chunks", pattern = "result_")
files = list.files("./result_chunks", pattern = "result_", full.names = TRUE)
files
results = list()
for (f in files){
result = read.table(f)
results = append(results, result)
}
results
results[[1]]
results[1]
results
results
files = list.files("./result_chunks", pattern = "result_", full.names = TRUE)
results = list()
for (f in files){
result = read.table(f)
results = append(results, list(result))
}
results
lapply(results, rbind)
lapply(results, rbind)
lapply(results, FUN = rbind)
results
results[[1]]
do.call(rbind, results)
results = do.call(rbind, results)
results
write.table(results, "results/results.csv")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE)
pbs_idx = 1
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE)
pbs_idx = 2
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE)
pbs_idx = 3
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE)
write.table(results, outfile, col.names = FALSE, row.names = FALSE)
pbs_idx = 1
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE, row.names = FALSE)
pbs_idx = 2
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE, row.names = FALSE)
pbs_idx = 3
# Index the correct observation
# Generate results
results = matrix(runif(3400), 34, 10)  #  Placeholder results
results = cbind(pbs_idx, results)
outfile = paste0("result_chunks/result_", pbs_idx, ".txt")
write.table(results, outfile, col.names = FALSE, row.names = FALSE)
Sys.getenv(x = "PBS_ARRAY_INDEX")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
pbs_idx
library(sbizombies)
quantile(runif(100), 0.9)
matrix(runif(1000), 100, 10)
prior = matrix(runif(1000), 100, 10)
s = matrix(runif(500), 100, 5)
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(summary_stats)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, :],
s = s[accept, :],
threshold_used = threshold_dist)
result
}
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(summary_stats)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, :],
s = s[accept, :],
threshold_used = threshold_dist)
result
}
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(summary_stats)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, ],
s = s[accept, ],
threshold_used = threshold_dist)
result
}
prior = matrix(runif(1000), 100, 10)
s = matrix(runif(500), 100, 5)
abc_rej(prior, s, runif(5))
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(s)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, ],
s = s[accept, ],
threshold_used = threshold_dist)
result
}
#' Rejection ABC
#' @param prior Matrix of parameters from the prior
#' @param s Matrix of corresponding summary statistics
#' @param obs Vector of observed summary statistics
#' @param q Distance quantile under which simulations are excepted
#' @export
abc_rej = function(prior, s, s_obs, q = 0.01) {
# Scale summary statistics
scale_out = mean_and_sd(s)
s_scaled = scaler(s, scale_out)
s_obs_scaled = scaler(s_obs, scale_out)
# Calculate dists and reject
dists = distance(s_scaled, s_obs_scaled)
threshold_dist = quantile(dists, q)
accept = dists < threshold_dist
result = list(posterior = prior[accept, ],
s = s[accept, ],
threshold_used = threshold_dist)
result
}
prior = matrix(runif(1000), 100, 10)
s = matrix(runif(500), 100, 5)
abc_rej(prior, s, runif(5))
library(sbizombies)
distance()
library(sbizombies)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
pbs_idx
devtools::load_all("..")
devtools::install_github("https://github.com/danielward27/sbizombies")
n_sim = 10000
matrix(beta = runif(0, 3),
gamma = runif(0, 3))
matrix(runif(0, 3), runif(0, 3))
matrix(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
dim(matrix(runif(n_sim, 0, 3), runif(n_sim, 0, 3)))
dim(cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3)))
cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
read.table(paste0("pods/pod_theta_", pbs_idx, ".txt"))
read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s = szr(prior, 100, 99, 1, 0, 20, 10)
s = szr(prior)
s = szr(prior, N = 1000)
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s = szr(prior, N = 1000, tf = length(s_obs), initial = FALSE)
s
dim(s)
length(s_obs)
s_obs
as.vector(s_obs)
length(as.vector(s_obs))
unlist(s_obs)
as.vector(unlist(s_obs))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs), initial = FALSE)
dim(s)
s
dim(s)
abc_rej(prior, s, s_obs)
length(s_obs)
ncol(s)
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
abc_rej(prior, s, s_obs)
s
is.na(s)
any(is.na(s))
abc_rej(prior, s, s_obs)
write.table(prior, "temp_prior.txt")
write.table(s, "temp_s.txt")
write.table(s_obs, "temp_s_obs.txt")
library(sbizombies)
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
getwd()
szr(t(c(1,2)), 100, 100)
szr(t(c(1,2)), 100, 100)
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
szr(t(c(1,2)), 100, 100)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
devtools::load_all("..")
pbs_idx = as.integer(Sys.getenv(x = "PBS_ARRAY_INDEX"))
if (is.na(pbs_idx)){
pbs_idx = 1 # So can run locally
}
n_sim = 10000
prior = cbind(runif(n_sim, 0, 3), runif(n_sim, 0, 3))
s_obs = read.table(paste0("pods/pod_s_", pbs_idx, ".txt"))
s_obs = as.vector(unlist(s_obs))
s = szr(prior, N = 1000, tf = length(s_obs)/2, initial = FALSE)
res = abc_rej(prior, s, s_obs)
scale_out
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
szr(theta, N = 1000, tf = 500)
[1, ]
szr(theta, N = 1000, tf = 500)[1, ]
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
(theta, N = 1000, tf = 500)
szr(theta, N = 1000, tf = 500)
theta
szr(c(0.55, 2.10), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
devtools::load_all("..")
set.seed(2)
i = 1
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
szr(t(c(0.55, 2.10)), N = 1000, tf = 500)
devtools::load_all("..")
devtools::load_all("..")
devtools::load_all("..")
compileAttributes()
compileAttributes("..")
devtools::load_all("..")
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
devtools::load_all("..")
set.seed(2)
i = 1
while (i <= 100){
theta = t(c(beta = runif(1, 0, 3), gamma = runif(1, 0, 3)))
result = szr(theta, N = 1000, tf = 500)[1, ]
if (length(result) > 10 & length(result < 100)){
pod_theta_filename = paste0("pods/pod_theta_", i, ".txt")
pod_s_filename = paste0("pods/pod_s_", i, ".txt")
write.table(theta, file = pod_theta_filename, row.names = FALSE, col.names = FALSE)
write.table(result, file = pod_s_filename, row.names = FALSE, col.names = FALSE)
i = i+1
}
}
devtools::load_all("..")
devtools::load_all("..")
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
roxygen2::roxygenise()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
roxygen2::roxygenise()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
pkgbuild::compile_dll()
devtools::document()
source('~/Documents/compass/sbizombies/analysis/generate_pods.R', echo=TRUE)
